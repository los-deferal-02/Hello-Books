{
  "swagger": "2.0",
  "info": {
    "description": "This is an API for a system that allows efficient, cost-effective management libraries",
    "version": "1.0.0",
    "title": "Hello Books Application API",
    "contact": {
      "email": "email@address.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "For accessing the API routes other than Sign In and Sign Up, a valid JWT must be added in all the requests in the the Authorization Header"
    }
  },
  "tags": [
    {
      "name": "Base",
      "description": "Base Path for API endpoints"
    },
    {
      "name": "Users",
      "description": "Operations to be carried out only by the users"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/": {
      "get": {
        "tags": ["Base"],
        "summary": "API Endpoint Home Path",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Hello Books API",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Hello Books API"
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "Handles the creation of new user",
        "description": "This endpoint creates a new user and persist input data to the database",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "This is the request body object containing users' signup information. Role can be 'patron' or 'author'",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSignupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User has been successfully resgistered"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Email or Username exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Handles users' sign in into the application",
        "description": "This endpoint sign in users afer authentications",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "This is the request body object containing users' sign in information. UserLogin can be email or username",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "General Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User has entered incorrect details"
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/books": {
      "post": {
        "tags": ["Users"],
        "summary": "Handles addition of books",
        "description": "This endpoint adds a new book to the library",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "This is the request body object containing book's information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddBook"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Book created successfully"
          }
        }
      }
    },
    "/books/request": {
      "post": {
        "tags": ["Users"],
        "summary": "Handles the creation of book request by users",
        "description": "This endpoint enables user to be able to make request for a book that is not yet in the library",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "This is the body of the request object containing information about the book the user wants to request for.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Book request was created successfully"
          },
          "409": {
            "description": "Duplicate request was made for a book"
          },
          "422": {
            "description": "Invalid data format"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/verifyEmail/:email/:verifyCode": {
      "patch": {
        "tags": ["Users"],
        "summary": "Handles verification of email address provided by user during signup",
        "description": "This endpoint verifies the user's email address",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Email Verified"
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/userProfile/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Handles viewing user profile",
        "description": "This endpoint gets a user profile",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Profile Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Handles editing user profile",
        "description": "This endpoint edits a user profile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "This is the request body object containing users profile information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "401": {
            "description": "Unathorized access"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/auth/forgot": {
      "post": {
        "tags": ["Users"],
        "summary": "Handles users' forgot password request",
        "description": "This endpoint enables users to request for password reset",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "This is the request body object containing users' sign in information. UserLogin can be email or username",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPasswordResetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "General Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User has entered incorrect details"
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/reset/:token": {
      "post": {
        "tags": ["Users"],
        "summary": "Handles users' reset password",
        "description": "This endpoint enables users to reset their password",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "This is the request body object containing users' sign in information. UserLogin can be email or username",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "General Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User has entered incorrect details"
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/authors/{authorId}/favourite": {
      "post": {
        "tags": [
            "Books"
        ],
        "summary": "Add author as favourite",
        "description": "This endpoint adds author to user favourite list",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ],
        "security": [
            {
              "Bearer": []
            }
        ],
        "parameters": [
            {
              "in": "path",
              "name": "authorId",
              "type": "integer",
              "required": true,
              "description": "Author Id"
            }
        ],
        "responses": {
            "201": {
              "description": "Author added to favourite list"
            },
            "401": {
              "description": "Authentication Error"
            },
            "404": {
              "description": "Author not found"
            },
            "409": {
            "description": "Author is already added as favourite"
          },
            "500": {
              "description": "Internal server error"
            }
        }
      }
    },
    "/authors/favourites": {
      "get": {
        "tags": ["Books"],
        "summary": "API Endpoint to view all favourite books",
        "produces": ["application/json"],
        "security": [
          {
              "Bearer": []
          }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Shows list of user favourite authors"
          },
          "401": {
            "description": "Authentication Error"
          },
          "404": {
            "description": "Author not found in favourite list"
          },
          "500": {
            "description": "Internal server error"
        }
        }
      }
    }
  },
  "definitions": {
    "UserSignupRequest": {
      "title": "User Signup Request",
      "type": "object",
      "properties": {
        "userName": {
          "description": "username of the user",
          "type": "string"
        },
        "email": {
          "description": "Email of the user",
          "type": "string"
        },
        "firstName": {
          "description": "First name of the user",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of the user",
          "type": "string"
        },
        "role": {
          "description": "role of the user",
          "type": "string"
        },
        "password": {
          "description": "Password of the user",
          "type": "string"
        }
      },
      "example": {
        "userName": "example",
        "email": "example@user.com",
        "firstName": "Marky",
        "lastName": "Steve",
        "role": "author",
        "password": "Hellobooks2019"
      }
    },
    "UserLoginRequest": {
      "title": "User Login Request",
      "type": "object",
      "properties": {
        "userLogin": {
          "description": "Email or username of the user",
          "type": "string"
        },
        "password": {
          "description": "Password of the user",
          "type": "string"
        }
      },
      "example": {
        "userLogin": "example@user.com",
        "password": "hellobooks"
      }
    },
    "UserProfile": {
      "title": "User profile",
      "type": "object",
      "properties": {
        "bio": {
          "description": "User bio",
          "type": "string"
        },
        "avatarUrl": {
          "description": "Image URL",
          "type": "string"
        },
        "favoriteBook": {
          "description": "Name of favorite book",
          "type": "string"
        },
        "favoriteGenre": {
          "description": "Name of favorite genre",
          "type": "string"
        },
        "favoriteAuthor": {
          "description": "Name of favorite author",
          "type": "string"
        }
      },
      "example": {
        "bio": "Reading and Chilling",
        "avatarUrl": "external link",
        "favoriteBook": "JS",
        "favoriteGenre": "Code",
        "favoriteAuthor": "Medium"
      }
    },
    "AddBook": {
      "title": "Add new book",
      "type": "object",
      "properties": {
        "title": {
          "description": "Book title or name",
          "type": "string"
        },
        "body": {
          "description": "Some little details about the book",
          "type": "string"
        },
        "description": {
          "description": "Well descriptive details or information about the book and why it should be read",
          "type": "string"
        },
        "genre": {
          "description": "The style or category of the book",
          "type": "string"
        },
        "pages": {
          "description": "Number of pages the book has",
          "type": "Number"
        },
        "author": {
          "description": "The person that wrote the book (book owner)",
          "type": "String"
        },
        "example": {
          "title": "Harry Potter",
          "body": "Harry Potter and the order of Phoenix",
          "description": "The book gives insight about Loyalty, friendship and bravery by young people. And also defeating evil and restoring glory to a great school",
          "genre": "Science Fiction",
          "pages": 475
        }
      }
    },
    "BookRequest": {
      "title": "Make new book request",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the book",
          "type": "String"
        },
        "author": {
          "description": "The author of the book",
          "type": "String"
        }
      },
      "example": {
        "title": "You don't know JS: Scope & Closures",
        "author": "Kylie Simpson"
      }
    },
    "UserPasswordResetRequest": {
      "title": "User Password Reset Request",
      "type": "object",
      "properties": {
        "userLogin": {
          "description": "Email or Username of an already existing user",
          "type": "string"
        }
      },
      "example": {
        "userLogin":"example@user.com"
       }
    },
    "UserResetPasswordRequest": {
      "title": "User Reset Password Request",
      "type": "object",
      "properties": {
        "userLogin": {
          "description": "Email or username of an already existing user",
          "type": "string"
        },
        "newPassword": {
          "description": "New password",
          "type": "string"
        },
        "confirmPassword": {
          "description": "Confirm password",
          "type": "string"
        }
      },
      "example": {
        "userLogin":"example@user.com",
        "newPassword": "1234",
        "confirmPassword": "1234"
      }
    }
  }
}
  